program test_driver

    use iso_c_binding, only: c_loc, c_f_pointer
    use self_descr_array_mod

    implicit none
    include 'netcdf.inc'

    ! In this example, the python code takes two arrays, one is float64 
    ! and the other is integer. They have to be pointer types.
    real(8), pointer :: a(:, :)
    integer, pointer :: b(:)

    ! Objects corresponding to the above arrays. They know about their
    ! type and their shape
    type(self_descr_array_type) :: obj_a, obj_b, obj_z

    ! Other local variables
    integer :: i, j, k, ier, ncid, a_id, b_id, status
    real(8), pointer :: z(:)

    ! The Python code communicates with the Fortran caller via these
    ! two files
    character(len=256) :: inputfile='input.nc', outputfile='output.nc'

    ! Sring that holds the command to execute
    character(len=512) :: cmd

    ! Build the arrays
    allocate(a(2, 3), b(6), z(2))

    ! Fill in the input arrays
    k = 0
    do j = 1, size(a, 2)
        do i = 1, size(a, 1)
            a(i, j) = k
            b(k + 1) = k
            k = k + 1
        enddo
    enddo

    ! Create the self-described-array (SDA) objectsi. r8 = 
    ! float64. i == integer. c_loc takes the address of the
    ! array. 
    call sda_create(obj_a, 'a', 'r8', shape(a), c_loc(a))
    call sda_create(obj_b, 'b', 'i', shape(b), c_loc(b))

    ! Write the input data to file. We need to create the file,
    ! then we need to define the data (type, shape) and finally we 
    ! write the data to file. 
    status = nf_create(trim(inputfile), NF_NETCDF4, ncid)
    if (status /= nf_noerr) call exit(1)

    ! Now we define the data. Note we return the netcdf id of each 
    ! variable (a_id, b_id, ...)
    call sda_define_data(obj_a, ncid, a_id, ier)
    if (ier /= 0) call exit(2)
    call sda_define_data(obj_b, ncid, b_id, ier)
    if (ier /= 0) call exit(2)

    ! Things have now been defined. 
    status = nf_enddef(ncid)
    if (status /= nf_noerr) then
        write(0,*) nf_strerror(status)
        ier = ier + 1
    endif

    ! Write the data.
    call sda_write_data(obj_a, ncid, a_id, ier)
    if (ier /= 0) call exit(3)
    call sda_write_data(obj_b, ncid, b_id, ier)
    if (ier /= 0) call exit(3)

    ! Done, close the NetCDF file
    status = nf_close(ncid)
    if (status /= nf_noerr) call exit(1)

    ! Execute the python code. 
    cmd = 'python ${CMAKE_SOURCE_DIR}/py/my_model.py -i ' // &
     & trim(inputfile) // ' -o ' // trim(outputfile)
    call execute_command_line(cmd, exitstat=ier)
    if (ier /= 0) then
        write(0,*) 'error executing command: ', cmd
        call exit(5)
    endif

    ! Now fetch the output.
    call sda_create_from_file(obj_z, trim(outputfile), 'z', ier)
    if (ier /= 0) then
        write(0,*)'ERROR: could not get "z"'
        call exit(6)
    endif

    ! Convert the address to data.
    call c_f_pointer(obj_z%address, z, obj_z%dims)
    print*,'z = ', z

    call sda_destroy(obj_a)
    call sda_destroy(obj_b)
    call sda_destroy(obj_z)

end program test_driver
